apiVersion: v1
kind: Namespace
metadata:
  name: "PR${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"

---
apiVersion: v1
kind: Secret
metadata:
  name: testing-secrets 
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
type: Opaque
stringData: 
  DEBUG: "0"
  ALLOWED_HOSTS: "PR${CIRCLE_PULL_REQUEST##*/}.${CIRCLE_PROJECT_REPONAME}.test.geek.zone"
  STRIPE_SECRET_KEY: "${TEST_STRIPE_SECRET_KEY}"
  STRIPE_PUBLIC_KEY: "${TEST_STRIPE_PUBLIC_KEY}"
  SAND_PRICE_ID: "price_1ImwyKJh8KDe9GPFrw4mWFai"
  DONATION_PRODUCT_ID: "prod_HnmOmrwV7zDBfw"
  GMAIL_APP_PASSWORD: "$GMAIL_APP_PASSWORD"
  DATABASE_HOST: "postgres"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "geekzone"
  DATABASE_USER: "${TEST_POSTGRES_USER}"      
  DATABASE_PASSWORD: "${TEST_POSTGRES_PASSWORD}"
  CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
  #CELERY_BACKEND: "amqp://h3_ZfqkTGiGmQIU5U6Y5YMsC-hKz6CyL:aWP_KIM-ZIZFNmixt8GBbnigKM5oWPFb@172.20.159.27"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets 
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
type: Opaque
stringData: 
  POSTGRES_DB: "geekzone"
  POSTGRES_USER: "${TEST_POSTGRES_USER}"
  POSTGRES_PASSWORD: "${TEST_POSTGRES_PASSWORD}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gz-web
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
  labels:
    app: gz-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gz-web
  template:
    metadata:
      labels:
        app: gz-web
    spec:
      initContainers:
      - name: wait-for-migration
        image: geekzone/backend:0.1.${CIRCLE_PREVIOUS_BUILD_NUM}
        command: ['python3', 'manage.py', 'migrate']
        envFrom:
          - secretRef:
              name: testing-secrets
      - name: wait-for-database
        image: geekzone/backend:0.1.${CIRCLE_PREVIOUS_BUILD_NUM}
        command: ['python3', 'manage.py', 'wait_for_database']
        envFrom:
          - secretRef:
              name: testing-secrets 
      containers:
      - name: django-backend
        image: geekzone/backend:0.1.${CIRCLE_PREVIOUS_BUILD_NUM}
        env:
          - name: "STRIPE_SECRET_KEY"
              value: ${TEST_STRIPE_SECRET_KEY}
      - name: frontend-proxy
        image: geekzone/frontend:0.1.${CIRCLE_PREVIOUS_BUILD_NUM}
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: gz-web-service
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "PR${CIRCLE_PULL_REQUEST##*/}.${CIRCLE_PROJECT_REPONAME}.test.geek.zone"
#    external-dns.alpha.kubernetes.io/ttl: "120" #optional
spec:
  type: ClusterIP
  selector:
    app: gz-web
  ports:
  - port: 80
    targetPort: 8080

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      name: postgres
  template:
    metadata:
      labels:
       name: postgres
    spec:
      containers:
        - name: postgres
          image: postgres
          ports:
            - containerPort: 5432
          envFrom:
          - secretRef:
              name: postgres-secrets
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    name: postgres

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-gz-web
  namespace: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_PROJECT_REPONAME}"
  annotations:
    nginx.ingress.kubernetes.io/app-root: /memberships/register 
#    nginx.ingress.kubernetes.io/default-backend: nginx-custom-default-backend 
#    nginx.ingress.kubernetes.io/custom-http-errors: "404,415"
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules: 
    - host: "PR${CIRCLE_PULL_REQUEST##*/}.${CIRCLE_PROJECT_REPONAME}.test.geek.zone"
      http:
        paths:
          - path: /
            backend:
              serviceName: gz-web-service 
              servicePort: 80