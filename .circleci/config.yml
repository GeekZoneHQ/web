version: 2.1
jobs:
  build-test-publish:
    docker:
      - image: cimg/base:2022.04
    environment:
      TAG: 0.1.<< pipeline.number >>
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Skip ci
          command: |
            if [[ "$CIRCLE_BRANCH" =~ ^doc.*$ ]]; then
              echo 'Just updating the documentation, no need to run the pipeline'
              circleci-agent step halt
            else
              echo 'Running the pipeline to build a new image'
            fi
      - run:
          name: Download and configure Snyk CLI
          command: |
            curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
            chmod +x ./snyk
            sudo mv ./snyk /usr/local/bin/
            snyk config set disableSuggestions=true
            snyk auth ${SNYK_TOKEN}
      - run:
          name: Build frontend image
          background: true
          command: |
            docker build -t geekzone/frontend:$TAG -f docker/proxy/Dockerfile .
      - run:
          name: "Build backend image in docker-compose"
          command: |
            docker-compose up -d
      - run:
          name: Run Testy McTestface tests
          command: |
            docker-compose run web python3 manage.py test 2>&1 | tee -a test-results/test-output
      - store_test_results:
          path: test-results/test-output
      - run:
          name: Run Snyk scan on frontend image
          command: |
            snyk test --docker geekzone/frontend:$TAG --severity-threshold=high --fail-on=all
      - run:
          name: Run Snyk scan on backend image
          command: |
            snyk test --docker geekzone/backend:$TAG --severity-threshold=high --fail-on=all
      - deploy:
          name: Push frontend image to Docker Hub
          background: true
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push geekzone/frontend:$TAG
      - deploy:
          name: Push backend image to Docker Hub
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push geekzone/backend:$TAG
  just-fail:
    machine:
      image: ubuntu-2204:2023.04.2
    steps:
      - run:
          name: This branch is not allowed to merge
          command: |
            echo "This branch is not allowed to merge"
            exit 1

  deploy-test:
    docker:
      - image: "geekzone/infra:0.1.409"
    environment:
      TAG: 0.1.<< pipeline.number >>
    steps:
      - checkout
      - run:
          name: Create .terraformrc file locally
          command: >-
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
      - run:
          name: Connect to or create k8s cluster
          command: |
            cd /usr/src/infra
            { az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            } &&
            { az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            } ||
            { create-azure-infra
            }
      - run:
          name: Deploy k8s resources
          command: |
            cd /usr/src/infra
            az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            deploy-test-in-azure
      - run:
          name: Plan cluster destruction
          command: |
            cd /usr/src/infra
            az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            kubectl apply -f azure/k8s/cronjobs/destroy-infra-test.yaml

  deploy-prod:
    docker:
      - image: "geekzone/infra:0.1.409"
    environment:
      TAG: 0.1.<< pipeline.number >>
    steps:
      - checkout
      - run:
          name: Create .terraformrc file locally
          command: >-
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
      - run:
          name: Connect to or create k8s cluster
          command: |
            cd /usr/src/infra
            { az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            } &&
            { az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            } ||
            { create-azure-infra
            }
      - run:
          name: Deploy k8s resources
          command: |
            cd /usr/src/infra
            az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            deploy-prod-in-azure
      - run:
          name: Plan cluster destruction
          command: |
            cd /usr/src/infra
            az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin
            kubectl apply -f azure/k8s/cronjobs/destroy-infra-prod.yaml

workflows:
  version: 2
  main-web:
    jobs:
      - build-test-publish:
          context:
            - org-global
      - just-fail:
          filters:
            branches:
              only:
                - /^junk-.*/
      - deploy-test:
          requires:
            - build-test-publish
          filters:
            branches:
              only: /feature-.*/
          context:
            - org-global
      - deploy-prod:
          requires:
            - build-test-publish
          filters:
            branches:
              only: main
          context:
            - org-global
