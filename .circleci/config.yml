version: 2.1
jobs:
  # build-test-publish:
  #   docker:
  #     - image: 'cimg/base:stable'
  #       auth:
  #         username: $DOCKER_USERNAME
  #         password: $DOCKER_PASSWORD
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: 20.10.7           
  #     - run:
  #         name: Build backend image in docker-compose
  #         command: |
  #           docker-compose up -d
  #     - run:
  #         name: Run Testy McTestface tests
  #         command: |
  #           docker-compose run web python3 manage.py test
  #     - deploy:
  #         name: Push backend image to Docker Hub
  #         command: |
  #           TAG="0.1.${CIRCLE_BUILD_NUM}"
  #           docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #           docker tag project_web:latest geekzone/backend:$TAG
  #           docker push geekzone/backend:$TAG
  #     - deploy:
  #         name: Build and push frontend image to Docker Hub
  #         command: |
  #           TAG="0.1.${CIRCLE_BUILD_NUM}"
  #           docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #           docker build -t geekzone/frontend:$TAG -f docker/proxy/Dockerfile .
  #           docker push geekzone/frontend:$TAG

  deploy-test:
    docker:
      - image: 'cimg/base:stable'
    environment:
      PR_NUMBER: "pr${CIRCLE_PULL_REQUEST##*/}"
    #   PROJECT_REPONAME: "${CIRCLE_PROJECT_REPONAME}"
    #   HOST: ${PR_NUMBER}.${PROJECT_REPONAME}.test.geek.zone
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install gettext-base  
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Fill out template variables in yaml files
          command: |
            echo ${PR_NUMBER}
            envsubst < k8s/test-environment/deploy-test.yaml > k8s/test-environment/deploy-testing.yaml
      - run:
          name: connect to k8s cluster
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/test-environment/deploy-testing.yaml
          resource-name: deployment/gz-web
          # namespace: ${CIRCLE_BRANCH}-${CIRCLE_PROJECT_REPONAME}
          show-kubectl-command: true

  deploy-prod:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install gettext-base  
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Fill out template variables in yaml files
          command: |
            envsubst < k8s/prod-environment/deploy-prod.yaml > k8s/deploy-production.yaml
      - run:
          name: connect to k8s cluster
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/deploy-production.yaml
          resource-name: deployment/gz-web
          namespace: prod
          show-kubectl-command: true
      # - run:
      #     name: delete resources in testing environment
      #     command: |
      #       kubectl delete namespace 
orbs:
  kubernetes: circleci/kubernetes@0.12.0
 

workflows:
  version: 2
  build-test-deploy:
    jobs:
  #     - build-test-publish:
  #         filters:
  #             branches:
  #               only:
  #               - master
  #               - /feature-*/
          # context:
          #   - org-global
      - deploy-test:
          # requires:
          # - build-test-publish
          # filters:
              # branches:
              #   only: /feature-*/
          context:
            - org-global
      - deploy-prod:
          # requires:
          # - build-test-publish
          filters:
              branches:
                only: master
          context:
            - org-global

