version: 2.1
orbs:
  kubernetes: circleci/kubernetes@0.12.0
  terraform: circleci/terraform@2.1.0

executors:
  terraform-executor:
    docker:
      - image: cimg/base:stable
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD 

# Set parameter here
parameters:
  destroy_test_dev:
    type: boolean
    default: false
  run_infra_build:
    type: boolean
    default: true    

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
            sudo apt-get update
            sudo apt install gettext-base moreutils
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install
  - &install-dependencies2
    run:
      name: Install dependencies2
      command: |        
        sudo apt update
        sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get install terraform -y
        sudo apt install gettext-base moreutils -y
        sudo apt install openssl -y
        sudo openssl enc -d -base64 -in ./terraform/keys/aws_key_ecc -out ./terraform/keys/aws_key_enc


jobs:
  build-test-publish:
    docker:
      - image: 'cimg/base:stable'
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7           
      - run:
          name: Build backend image in docker-compose
          command: |
            docker-compose up -d
      - run:
          name: Run Testy McTestface tests
          command: |
            docker-compose run web python3 manage.py test
      - deploy:
          name: Push backend image to Docker Hub
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag project_web:latest geekzone/backend:$TAG
            docker push geekzone/backend:$TAG
      - deploy:
          name: Build and push frontend image to Docker Hub
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker build -t geekzone/frontend:$TAG -f docker/proxy/Dockerfile .
            docker push geekzone/frontend:$TAG

  deploy-test:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install gettext-base moreutils
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Fill out template variables in yaml files
          command: |
            export PR_NUMBER=$(echo "pr${CIRCLE_PULL_REQUEST##*/}")
            envsubst < k8s/test-environment/deploy-test.yaml | sponge k8s/test-environment/deploy-test.yaml
      - run:
          name: connect to k8s cluster
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/test-environment/deploy-test.yaml
          resource-name: deployment/test-gz-web
          namespace: $(echo "pr${CIRCLE_PULL_REQUEST##*/}")-${CIRCLE_PROJECT_REPONAME}
          show-kubectl-command: true

  terraform-init-validate-plan-apply-job:
    executor: terraform-executor
    steps:      
      - checkout
      - *show-current-branch-name
      - *install-dependencies
      - *install-dependencies2
      - run:
          name: Create .terraformrc file locally
          command: >-
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
      - run:
          name: Fill out template variables in yaml files
          command: |
            export CIRCLECI_TOKEN=$(echo ${CIRCLECI_TOKEN})
            envsubst < ./terraform/deploy/templates/ec2-caller.sh | sponge ./terraform/deploy/templates/ec2-caller.sh
            export K8S_NS_NAME=$(echo "pr${CIRCLE_PULL_REQUEST##*/}")-${CIRCLE_PROJECT_REPONAME}
            envsubst < k8s/test-environment/deploy-test.yaml | sponge k8s/test-environment/deploy-test.yaml
            cd ./terraform
      - run:
          name: Terraform Validate & Format
          command: |
            terraform init
            terraform validate
      - run:
          name: Terraform Plan & Apply
          command: |
            terraform plan
            terraform apply -auto-approve

  destroy_test_infra-job:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-dependencies
      - *install-dependencies2
      - run:
          name: Fill out template variables in yaml files
          command: |
            export PR_NUMBER=$(echo "pr${CIRCLE_PULL_REQUEST##*/}")
            envsubst < k8s/test-environment/deploy-test.yaml | sponge k8s/test-environment/deploy-test.yaml
      - run:
          name: connect to k8s cluster
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      - kubernetes/install-kubectl
      - run:
          name: connect to k8s cluster
          command: |
            export NS_NAME=$(echo "pr${CIRCLE_PULL_REQUEST##*/}")-${CIRCLE_PROJECT_REPONAME}
            kubectl delete ns $NS_NAME
      - run: echo " Destroy the infra "
      - run:
          name: Create .terraformrc file locally
          command: >-
            echo "credentials \"app.terraform.io\" {token =
            \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc            
      - run:
          name: Terraform Destroy
          command: |
            cd ./terraform
            terraform init
            terraform destroy  -auto-approve

  deploy-prod:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install gettext-base moreutils
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Fill out template variables in yaml files
          command: |
            envsubst < k8s/prod-environment/deploy-prod.yaml | sponge k8s/prod-environment/deploy-prod.yaml
      - run:
          name: connect to k8s cluster
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: k8s/prod-environment/deploy-prod.yaml
          resource-name: deployment/gz-web
          namespace: prod
          show-kubectl-command: true

 

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-test-publish:
          filters:
              branches:
                only:
                - master
                - /feature-.*/
          context:
            - org-global
      - deploy-test:
          requires:
          - build-test-publish
          filters:
              branches:
                only: /feature-.*/
          context:
            - org-global
      - terraform-init-validate-plan-apply-job:          
          requires:          
          - deploy-test
          filters:
              branches:
                only: /feature-.*/
          context:
            - org-global
      - deploy-prod:      
          requires:
          - build-test-publish 
          filters:
              branches:
                only: master
          context:
            - org-global
  destroy_test_infra:
    when: << pipeline.parameters.destroy_test_dev >>
    jobs:
      - destroy_test_infra-job:          
          filters:
            branches:
              only:
                - /feature-.*/
