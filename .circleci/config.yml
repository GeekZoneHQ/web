version: 2.1
jobs:
  build-test-publish:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout  
      - run: 
          name: Skip ci
          command: |
            PR_NUMBER=$(echo ${CIRCLE_PULL_REQUEST##*/})
            TOTAL_FILES=$(curl -s -H "Accept: application/vnd.github.v3+json"   https://api.github.com/repos/GeekZoneHQ/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}/files | jq '.[] | {filename} | values[]' | wc -l)
            echo "The number of committed files in this PR is $TOTAL_FILES"
            MD_FILES=$(curl -s -H "Accept: application/vnd.github.v3+json"   https://api.github.com/repos/GeekZoneHQ/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}/files | jq '.[] | {filename} | values[]' | grep .md | wc -l)
            echo "The number of modified or added markdown files in this PR is $MD_FILES"

            if [ $MD_FILES -eq $TOTAL_FILES ]
            then
              echo "Skip ci/cd"
              circleci-agent step halt
            fi
      - run:
          name: Build frontend image 
          background: true
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker build -t geekzone/frontend:$TAG -f docker/proxy/Dockerfile .
      - run:
          name: "Build backend image in docker-compose" 
          command: |  
            docker-compose up -d
      - run:
          name: Run Testy McTestface tests
          command: |
            docker-compose run web python3 manage.py test 2>&1 | tee -a test-results/test-output
      - store_test_results:
          path: test-results/test-output
      - deploy:
          name: Push frontend image to Docker Hub
          background: true
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push geekzone/frontend:$TAG
      - deploy:
          name: Push backend image to Docker Hub
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag project_web:latest geekzone/backend:$TAG
            docker push geekzone/backend:$TAG

  # deploy-test:
  #   docker:
  #     - image: 'geekzone/infra'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create .terraformrc file locally
  #         command: >-
  #           echo "credentials \"app.terraform.io\" {token =
  #           \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
  #     - run:
  #         name: Connect to or create k8s cluster
  #         command: |
  #           cd /usr/src/infra
  #           { az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           } &&
  #           { az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           } ||
  #           { create-azure-infra
  #           }  
  #     - run:
  #         name: Deploy k8s resources
  #         command: | 
  #           cd /usr/src/infra
  #           az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           deploy-test-in-azure
  #     - run:
  #         name: Plan cluster destruction
  #         command: |
  #           cd /usr/src/infra
  #           az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           kubectl apply -f azure/k8s/cronjobs/destroy-infra-test.yaml

  # deploy-prod:
  #   docker:
  #     - image: 'geekzone/infra'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create .terraformrc file locally
  #         command: >-
  #           echo "credentials \"app.terraform.io\" {token =
  #           \"$TERRAFORM_TOKEN\"}" > $HOME/.terraformrc
  #     - run:
  #         name: Connect to or create k8s cluster
  #         command: |
  #           cd /usr/src/infra
  #           { az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           } &&
  #           { az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           } ||
  #           { create-azure-infra
  #           } 
  #     - run:
  #         name: Deploy k8s resources
  #         command: |
  #           cd /usr/src/infra
  #           az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           deploy-prod-in-azure
  #     - run:
  #         name: Plan cluster destruction
  #         command: |
  #           cd /usr/src/infra
  #           az login --service-principal -u $CLIENT_ID -p $CLIENT_PASSWORD --tenant $TENANT_ID
  #           az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --admin 
  #           kubectl apply -f azure/k8s/cronjobs/destroy-infra-prod.yaml
 

workflows:
  version: 2
  main-web:
    jobs:
      - build-test-publish:
          filters:
              branches:
                ignore: 
                - /junk-.*/
          context:
            - org-global
      # - deploy-test:
      #     requires:
      #     - build-test-publish
      #     filters:
      #         branches:
      #           only: /feature-.*/
      #     context:
      #       - org-global
      # - deploy-prod:
      #     requires:
      #     - build-test-publish 
      #     filters:
      #         branches:
      #           only: main
      #     context:
      #       - org-global
