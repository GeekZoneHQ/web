# Generated by Django 3.1.7 on 2021-04-07 09:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full name')),
                ('preferred_name', models.CharField(help_text='What should we call you?', max_length=255, verbose_name='Preferred name')),
                ('email', models.EmailField(max_length=254)),
                ('birth_date', models.DateField(help_text='When did you begin your glorious adventure around or local star?', verbose_name='Date of birth')),
                ('constitution_agreed', models.BooleanField(help_text='I have read and agree to abide by the <a href="http://geek.zone/constitution">Geek.Zone/Constitution</a>.')),
                ('stripe_customer_id', models.CharField(max_length=255, unique=True)),
                ('profile_image', models.ImageField(blank=True, help_text='Strike a geek pose and give us your best shot! This will be used on your GZID card', upload_to='images/', verbose_name='Selfie')),
                ('telephone', models.CharField(blank=True, max_length=255, verbose_name='Phone number')),
                ('minecraft_username', models.CharField(blank=True, help_text='What is your Minecraft Java Edition username? Let us know so that you can join us on Geek.Zone/Minecraft!', max_length=255, verbose_name='Minecraft username')),
                ('address_1', models.CharField(blank=True, max_length=255, verbose_name='Address line one')),
                ('address_postcode', models.CharField(blank=True, max_length=10, verbose_name='Postcode')),
                ('gift_aid', models.BooleanField(default=False, help_text='I would like The UK Government to increase the value of my donation by as much as 25% at no cost to me!<br /><br />I want to Gift Aid my donation, and any donations I make in the future or have made in the past 4 years, to Geek.Zone. I am a UK taxpayer and understand that if I pay less Income Tax and/or Capital Gains Tax than the amount of Gift Aid claimed on all my donations in that tax year it is my responsibility to pay any difference.<br /><br />I will notify Geek.Zone if I:<ul><li>want to cancel this declaration</li><li>change my name or home address</li><li>no longer pay sufficient tax on my income and/or capital gains</li></ul>', verbose_name='Gift aid')),
                ('gdpr_likeness', models.BooleanField(default=False, help_text='May we use photos, videos or voice recordings of you in our publications?', verbose_name='Likeness')),
                ('gdpr_sms_updates', models.BooleanField(default=False, help_text='May we sent you updates, like event information, via SMS?', verbose_name='SMS updates')),
                ('gdpr_sms_notifications', models.BooleanField(default=False, help_text='May we send you system notifications by SMS? This includes 2FA notifications', verbose_name='SMS notifications')),
                ('gdpr_email_updates', models.BooleanField(default=False, help_text='May we send you updates, like event information, via email?', verbose_name='Email updates')),
                ('gdpr_email_notifications', models.BooleanField(default=False, help_text='May we send you system notifications by email? This is required to participate in Geek.Zone Elections', verbose_name='Email notifications')),
                ('gdpr_telephone_updates', models.BooleanField(default=False, help_text='May we call you with updates, like event information?', verbose_name='Phone updates')),
                ('gdpr_telephone_notifications', models.BooleanField(default=False, help_text='May we call you to notify you of system messages? This includes 2FA', verbose_name='Phone notifications')),
                ('gdpr_post_updates', models.BooleanField(default=False, help_text='May we send you updates, like event information, via post?', verbose_name='Post updates')),
                ('gdpr_post_notifications', models.BooleanField(default=False, help_text='May we send you system notifications by post? This includes 2FA and voting notifications', verbose_name='Post notifications')),
                ('renewal_date', models.DateTimeField(null=True, verbose_name='Membership renewal date')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'member',
                'verbose_name_plural': 'members',
                'permissions': (('has_sand_membership', 'Member has paid sand'),),
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_subscription_id', models.CharField(max_length=255)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memberships.member')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_subscription_id', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(null=True)),
                ('last_payment_time', models.DateTimeField(null=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memberships.member')),
            ],
        ),
        migrations.CreateModel(
            name='FailedPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_subscription_id', models.CharField(max_length=255)),
                ('stripe_event_type', models.CharField(max_length=255)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memberships.member')),
            ],
        ),
    ]
